import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.Socket;
import java.util.Scanner;
//Application client
public class Client {
	private static Socket socket;
	public static void main(String[] args) throws Exception {
			//Adresse et port du serveur
	
		Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the server address (IPv4): ");
        String serverAddress = scanner.nextLine();

        System.out.print("Enter the port number: ");
        int port = scanner.nextInt();
        
      //  String serverAddress = "127.0.0.1";
      //  int port = 5000;
    
        if (isValidIPv4Address(serverAddress)) {	//Création d'une nouvelle connexion aves le serveur
        	socket = new Socket(serverAddress, port);
        	System.out.format("Serveur lancé sur [%s:%d]", serverAddress, port);
			//Création d'un canal entrant pour recevoir les messages envoyés, par le serveur
        	DataInputStream in = new DataInputStream(socket.getInputStream());
        	DataOutputStream out = new DataOutputStream(socket.getOutputStream());
			//Attente de la réception d'un message envoyé par le server sur le canal
        	String helloMessageFromServer = in.readUTF(); //lecture du message de clienthandler, bloque jusqua en lire un
        	System.out.println(helloMessageFromServer);
        	out.writeUTF("Ceci est un message du client");
			//fermeture de la connexion avec le serveur
        	socket.close();
        } else {
        	System.out.println("Invalid IPv4 address!");
        }
	}
	public static boolean isValidIPv4Address(String ip) {
        String[] octets = ip.split("\\.");

        if (octets.length != 4) {
            return false;
        }

        for (String octet : octets) {
            try {
                int value = Integer.parseInt(octet);

                if (value < 0 || value > 255) {
                    return false;
                }
            } catch (NumberFormatException e) {
                return false;
            }
        }

        return true;
    }
}

//reste du code client
// appels s/quentiels, on doit envoyer A, puis B et lire A PUIS B